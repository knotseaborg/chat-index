"""
Integration tests for reconstructing message and summary trees from the database
into TreeCache structures.

TreeCache is responsible for reconstructing two in-memory structures:
- message_tree: a directed graph of message relationships (parent-child links)
- summary_tree: a hierarchical summary map over messages, based on start/end IDs

This test suite ensures that the cached trees reflect correct structure after
being populated from a persisted thread in the SQLite DB.
"""

import pytest

from db.db import DB
from services.chat_trees import TreeCache


@pytest.fixture
def db():
    """
    Fixture providing a temporary in-memory SQLite database.
    Used to verify in-memory tree reconstruction from actual persisted data.
    """
    return DB("sqlite:///:memory:")


class DummyLLMOps:
    """Mock class for LLM logic, not used in this module."""

    def generate_summary(self, contents):
        return f"Summary({len(contents)} messages)"

    def detect_topic_shift(self, prev, curr):
        return True


def test_linear_message_tree_build(db):
    """
    Test whether a linear chain of messages is correctly reconstructed from DB
    into the in-memory message_tree.

    Structure:
        A → B → C
    """
    tree_cache = TreeCache(db, 2)
    thread_id = db.insert_thread()

    m1_id = db.insert_message(thread_id, "Message A")
    m2_id = db.insert_message(thread_id, "Message B")
    m3_id = db.insert_message(thread_id, "Message C")
    db.insert_link(thread_id, m1_id, m2_id)
    db.insert_link(thread_id, m2_id, m3_id)

    message_tree, _ = tree_cache.get(thread_id)

    assert message_tree.index[m1_id]["child_ids"] == [m2_id]
    assert message_tree.index[m2_id]["child_ids"] == [m3_id]
    assert message_tree.index[m3_id]["child_ids"] == []
    assert message_tree.index[m2_id]["parent_id"] == m1_id
    assert message_tree.index[m3_id]["parent_id"] == m2_id


def test_branched_message_tree_build(db):
    """
    Test whether a branched message tree is reconstructed properly.

    Structure:
            A
           / \
          B   C
    """
    tree_cache = TreeCache(db, 2)
    thread_id = db.insert_thread()

    m1_id = db.insert_message(thread_id, "Message A")
    m2_id = db.insert_message(thread_id, "Message B")
    m3_id = db.insert_message(thread_id, "Message C")
    db.insert_link(thread_id, m1_id, m2_id)
    db.insert_link(thread_id, m1_id, m3_id)

    message_tree, _ = tree_cache.get(thread_id)

    assert message_tree.index[m1_id]["child_ids"] == [m2_id, m3_id]
    assert message_tree.index[m2_id]["parent_id"] == m1_id
    assert message_tree.index[m3_id]["parent_id"] == m1_id
    assert message_tree.index[m2_id]["child_ids"] == []
    assert message_tree.index[m3_id]["child_ids"] == []


def test_linear_summary_tree_build(db):
    """
    Test whether a linear chain of summaries over sequential messages is
    correctly reconstructed.

    Messages: A → B → C → D
    Summaries:
        Summary AB: A to B
        Summary CD: C to D
    Expected: AB is the root, CD is its child.
    """
    tree_cache = TreeCache(db, 2)
    thread_id = db.insert_thread()

    m1 = db.insert_message(thread_id, "Message A")
    m2 = db.insert_message(thread_id, "Message B")
    m3 = db.insert_message(thread_id, "Message C")
    m4 = db.insert_message(thread_id, "Message D")
    db.insert_link(thread_id, m1, m2)
    db.insert_link(thread_id, m2, m3)
    db.insert_link(thread_id, m3, m4)
    db.insert_summary("Summary AB", m1, m2, None)
    db.insert_summary("Summary CD", m3, m4, None)

    _, summary_tree = tree_cache.get(thread_id)

    s1_id = summary_tree.index.end_message_lookup[m2]
    s2_id = summary_tree.index.end_message_lookup[m4]
    s1 = summary_tree.index.summary_id_lookup[s1_id]
    s2 = summary_tree.index.summary_id_lookup[s2_id]

    assert s1["child_ids"] == [s2_id]
    assert s2["child_ids"] == []
    assert s1["parent_id"] is None


def test_branched_summary_tree_build(db):
    """
    Test reconstruction of a branched summary tree.

    Messages: A → B → C → D
                     \
                      → E → F

    Summaries:
        Summary AB: A to B (root)
        Summary CD: C to D (child of AB)
        Summary EF: E to F (child of AB)

    Expected:
        AB
       /  \
     CD    EF
    """
    tree_cache = TreeCache(db, 2)
    thread_id = db.insert_thread()

    m1 = db.insert_message(thread_id, "Message A")
    m2 = db.insert_message(thread_id, "Message B")
    m3 = db.insert_message(thread_id, "Message C")
    m4 = db.insert_message(thread_id, "Message D")
    m5 = db.insert_message(thread_id, "Message E")
    m6 = db.insert_message(thread_id, "Message F")
    db.insert_link(thread_id, m1, m2)
    db.insert_link(thread_id, m2, m3)
    db.insert_link(thread_id, m3, m4)
    db.insert_link(thread_id, m2, m5)
    db.insert_link(thread_id, m5, m6)
    db.insert_summary("Summary AB", m1, m2, None)
    db.insert_summary("Summary CD", m3, m4, None)
    db.insert_summary("Summary EF", m5, m6, None)

    _, summary_tree = tree_cache.get(thread_id)

    s1_id = summary_tree.index.start_message_lookup[m1]
    s2_id = summary_tree.index.start_message_lookup[m3]
    s3_id = summary_tree.index.start_message_lookup[m5]
    s1 = summary_tree.index.summary_id_lookup[s1_id]
    s2 = summary_tree.index.summary_id_lookup[s2_id]
    s3 = summary_tree.index.summary_id_lookup[s3_id]

    assert s1["child_ids"] == [s2_id, s3_id]
    assert s2["child_ids"] == []
    assert s3["child_ids"] == []
    assert s1["parent_id"] is None
